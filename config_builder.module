<?php
/**
 * @file
 * Contains core functions for the Configuration Builder module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_permission().
 */
function config_builder_permission() {
  return array(
    'administer config builder' => array(
      'title' => t('Administer Configuration builder'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function config_builder_menu() {
  $items = array();

  foreach (config_builder_crud_load_all(FALSE, TRUE) as $config) {
    $items[$config->path] = array(
      'title' => $config->label,
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('config_builder_page_callback', $config),
      'access callback' => $config->access['type'],
      'access arguments' => array($config->access[$config->access['type']]),
    );
  }

  return $items;
}

/**
 * Access callback for user roles.
 */
function config_builder_role_access($roles) {
  global $user;
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function config_builder_module_implements_alter(&$implementations, $hook) {
  if ('menu' == $hook) {
    unset($implementations['config_builder']);
    $implementations['config_builder'] = FALSE;
  }
}

/**
 * Implements hook_flush_caches().
 */
function config_builder_flush_caches() {
  db_delete('form_builder_cache')
    ->condition('type', 'config_builder')
    ->execute();
  form_builder_crud_index_save();
}

/**
 * CRUD function; Load configuration by name.
 */
function config_builder_crud_load($name) {
  ctools_include('export');
  $config = ctools_export_crud_load('config_builder', $name);
  return !empty($config) ? $config : FALSE;
}

/**
 * CRUD function; Load all configurations.
 */
function config_builder_crud_load_all($disabled = FALSE, $reset = FALSE) {
  $configs = array();

  ctools_include('export');
  foreach (ctools_export_crud_load_all('config_builder', $reset) as $config) {
    if ($disabled || empty($config->disabled)) {
      $configs[] = $config;
    }
  }

  return $configs;
}

/**
 * CRUD function; Load configuration index by id.
 */
function config_builder_crud_index_load($id, $config = NULL) {
  $query = db_select('config_builder_index', 'cbi')
    ->fields('cbi')
    ->condition('id', $id);
  if (!is_null($config)) {
    $query->condition('config', $config);
  }
  $result = $query->range(0, 1)
    ->execute()
    ->fetch();
  if (!empty($result)) {
    $result->default_value = unserialize($result->default_value);
    return $result;
  }
  return FALSE;
}

/**
 * CRUD function; Load all configuration indexes.
 */
function config_builder_crud_index_load_all() {
  $results = db_select('config_builder_index', 'cbi')
    ->fields('cbi')
    ->execute()
    ->fetchAll();
  foreach ($results as &$result) {
    $result->default_value = unserialize($result->default_value);
  }
  return $results;
}

/**
 * Rebuild Configuration builder index.
 */
function form_builder_crud_index_save($config = NULL) {
  $configs = !is_null($config) ? array($config) : config_builder_crud_load_all(TRUE);

  foreach ($configs as $config) {
    // Remove all existing entries for this configuration.
    db_delete('config_builder_index')
      ->condition('config', $config->name)
      ->execute();

    if (empty($config->disabled)) {
      // Get FAPI elements from configuration.
      $form = array();
      ob_start();
      eval($config->fapi);
      ob_get_clean();

      // Index each item.
      _config_builder_recurse_index($form, $config);
    }
  }
}

/**
 * Recursively add default values to form elements.
 */
function _config_builder_recurse_index(&$form, $config) {
  foreach (element_children($form) as $key) {
    if (!in_array($form[$key]['#type'], array('fieldset'))) {
      db_insert('config_builder_index')
        ->fields(array(
          'config' => $config->name,
          'id' => $key,
          'title' => $form[$key]['#title'],
          'default_value' => serialize(isset($form[$key]['#default_value']) ? $form[$key]['#default_value'] : ''),
        ))
        ->execute();
    }
    _config_builder_recurse_index($form[$key], $config);
  }
}

/**
 * Configuration Builder page callback.
 */
function config_builder_page_callback($form, $form_state, $config) {
  ob_start();
  eval($config->fapi);
  ob_get_clean();

  // Set default value on each item.
  _config_builder_recurse_defaults($form);

  return system_settings_form($form);
}

/**
 * Recursively add default values to form elements.
 */
function _config_builder_recurse_defaults(&$form) {
  foreach (element_children($form) as $key) {
    if (!in_array($form[$key]['#type'], array('fieldset'))) {
      $default = isset($form[$key]['#default_value']) ? $form[$key]['#default_value'] : NULL;
      $form[$key]['#default_value'] = variable_get($key, $default);
    }
    _config_builder_recurse_defaults($form[$key]);
  }
}

/**
 * Implements hook_token_info().
 */
function config_builder_token_info() {
  $info = array();

  $indexes = config_builder_crud_index_load_all();
  if (!empty($indexes)) {
    $info['types']['config'] = array(
      'name' => t('Configuration builder variables'),
      'description' => t('Tokens related to configuration builder values.'),
    );

    $info['types']['config-variable'] = array(
      'name' => t('Configuration builder variable'),
      'description' => t('Tokens for configuration builder variable.'),
      'needs-data' => 'config-variable',
    );

    $info['tokens']['config-variable']['default:?'] = array(
      'name' => 'Default value from source',
      'description' => t('Value using the default value from the provided configuration page.'),
    );

    $info['tokens']['site']['config'] = array(
      'name' => 'Configuration builder variables',
      'description' => t('Configuration builder variables.'),
      'type' => 'config',
    );

    foreach ($indexes as $index) {
      $info['tokens']['config'][$index->id] = array(
        'name' => $index->title,
        'description' => t('Value of the "@name" configuration variable.', array('@name' => $index->id)),
        'type' => 'config-variable',
      );
    }
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function config_builder_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  switch ($type) {
    case 'config':
      foreach ($tokens as $name => $original) {
        $token = explode(':', $name);
        $variable_data = variable_get($token[0], NULL);
        if (isset($token[1])) {
          $replacements += token_generate('config-variable', array($name => $original), array('config-variable' => $variable_data), $options);
        }
        else {
          if (is_null($variable_data)) {
            $index = config_builder_crud_index_load($token[0]);
            $variable_data = $index->default_value;
          }
          $replacements[$original] = $variable_data;
        }
      }
      break;

    case 'config-variable':
      foreach ($tokens as $name => $original) {
        $token = explode(':', $name);
        $variable_data = $data['config-variable'];

        switch ($token[1]) {
          case 'default':
            if (is_null($variable_data) && isset($token[2])) {
              $index = config_builder_crud_index_load($token[0], $token[2]);
              $variable_data = $index->default_value;
            }
            $replacements[$original] = $variable_data;
            break;
        }
      }
      break;

    case 'site':
      if ($config_tokens = token_find_with_prefix($tokens, 'config')) {
        $replacements += token_generate('config', $config_tokens, array(), $options);
      }
      break;
  }

  return $replacements;
}

